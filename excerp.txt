AN EXCERPT FROM: WHY PROGRAMMERS WORK AT NIGHT

"To do high, real good physics work you do need absolutely solid lengths of time,
so that when you’re putting ideas together which are vague and hard to remember...
it needs a lot of concentration." -Richard Feynman, The Pleasure of Finding Things Out

Just like Feynman’s physics example, programming is a process requiring deep thought
and a lot of concentration. It’s abstractions all the way down.
The only way to do good programming is to become completely immersed,
so focused you might forget to eat drink and sleep. You need flow.

Flow is the mental state of operation in which a person performing an activity
is fully immersed in a feeling of energised focus, full involvement, and enjoyment
in the process of the activity.

Flow was discovered in 1975 by Mihaly Csikszentmihalyi while he was observing artists
who got so lost in their work they would forget to eat and drink and would even stop
noticing the passage of time. Flow is the natural state of the programmer.

Any programmer will tell you stories of the wonderful work they’ve done while in flow,
in the zone, wired in or any of a number of euphemisms that all mean the same thing -
the programmer had an interesting task; it was challenging, but not too much; and they
were left alone to work.

A lot, if not most, of creative professions experience flow, but it’s especially important
for programmers. The systems we work on have become so complex they are impossible for an
individual to understand fully. It’s like building a house of cards where every card is
slightly bent and torn. You have to balance them carefully, keep all of them in mind
when adding a new card and should a single card falter, everything will come tumbling down.

When a programmer works their brain is playing this delicate game of card house building.
Unless fully immersed, the going will be tough, if not impossible. More importantly, the
work we do provides everything necessary to achieve flow: challenging, offers immediate
feedback, clear objectives, and never really ends.

It’s very easy to get sucked into a programming task. You build the framework in your
mind, start working, constantly receive feedback from the computer, make tweaks,
beat one small problem after another until suddenly it’s morning and birds are chirping
outside the window. You’re feeling slightly tired, quite hungry, a bit thirsty and
confused as to where all the time has vanished off to.

Right now, if you’ve ever experienced flow, you are nodding in understanding. If not,
you think I’m crazy and am talking complete nonsense. How could you not notice when
you get hungry or tired!? Silly person.

Surely you’ve played a video game before? Video games are specifically designed to get
players into a state of flow. To make them fully concentrated on the gaming experience
and forget the world around them. The learning curve is always just steep enough to be
interesting, the challenges are non-repetitive and you’re having fun. This is why we
hear unfortunate stories of people forgetting to feed their children or starving themselves
to death while playing. Now imagine your job looked like that. A never-ending
string of challenges you can solve with the tiniest bits of focused thinking.

Flow is a state of complete immersion in an activity, a state where the outside and
inside world merge into one and the person is simply present. Mihaly Csikszentmihaly,
the father of flow research in psychology, describes flow as "...completely focused
motivation. A single-minded immersion that represents perhaps the ultimate in harnessing
the emotions in service of performing and learning."

In his essay "Holding a program in one’s head," Paul Graham explains that to be effective,
programmers must be able to hold an entire program in their head while they work. It’s the
only way the problem and its solution can have the plasticity needed to make sweeping
changes and improvements. Because programmers tend to work at the limits of their tolerance
for complexity, holding a program in one’s head is only possible in a state of flow.

But flow is a fragile balance between many opposing forces. The programmer must be willing
and able to completely focus on the task at hand, they must have a clear goal to work towards,
fresh challenges must be coming in just quickly enough and they must feel a sense of purpose,
even joy, in what they’re doing.